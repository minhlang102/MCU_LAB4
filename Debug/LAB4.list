
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002d8c  08002d8c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d8c  08002d8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000074  08002e08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08002e08  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af0b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb3  00000000  00000000  0002afa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017b90  00000000  00000000  0002db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dc53  00000000  00000000  000456c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008765b  00000000  00000000  0005331b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000da976  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000be8  00000000  00000000  000da9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003648  00000000  00000000  000db5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d4c 	.word	0x08002d4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002d4c 	.word	0x08002d4c

0800014c <LIST_Add_Task>:
 *      Author: minhl
 */

#include "list.h"

unsigned char LIST_Add_Task(list* my_list, void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD, uint32_t TaskID, node* prev, node* cur) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	node* task = (node*)malloc(sizeof(node));
 800015a:	2018      	movs	r0, #24
 800015c:	f002 fce4 	bl	8002b28 <malloc>
 8000160:	4603      	mov	r3, r0
 8000162:	617b      	str	r3, [r7, #20]
	task->data.pTask = pFunction;
 8000164:	697b      	ldr	r3, [r7, #20]
 8000166:	68ba      	ldr	r2, [r7, #8]
 8000168:	601a      	str	r2, [r3, #0]
	task->data.DELAY = DELAY;
 800016a:	697b      	ldr	r3, [r7, #20]
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	605a      	str	r2, [r3, #4]
	task->data.PERIOD = PERIOD;
 8000170:	697b      	ldr	r3, [r7, #20]
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	609a      	str	r2, [r3, #8]
	task->data.TaskID = TaskID;
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	6a3a      	ldr	r2, [r7, #32]
 800017a:	60da      	str	r2, [r3, #12]
	task->data.RunMe = 0;
 800017c:	697b      	ldr	r3, [r7, #20]
 800017e:	2200      	movs	r2, #0
 8000180:	741a      	strb	r2, [r3, #16]
	task->next = NULL;
 8000182:	697b      	ldr	r3, [r7, #20]
 8000184:	2200      	movs	r2, #0
 8000186:	615a      	str	r2, [r3, #20]

	if (my_list->size == 0) {
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	689b      	ldr	r3, [r3, #8]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d10d      	bne.n	80001ac <LIST_Add_Task+0x60>
		my_list->head = task;
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	697a      	ldr	r2, [r7, #20]
 8000194:	601a      	str	r2, [r3, #0]
		my_list->tail = task;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	697a      	ldr	r2, [r7, #20]
 800019a:	605a      	str	r2, [r3, #4]
		my_list->size++;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	1c5a      	adds	r2, r3, #1
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	609a      	str	r2, [r3, #8]
		return TaskID;
 80001a6:	6a3b      	ldr	r3, [r7, #32]
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	e030      	b.n	800020e <LIST_Add_Task+0xc2>
	} else if (prev == NULL) {
 80001ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10e      	bne.n	80001d0 <LIST_Add_Task+0x84>
		task->next = my_list->head;
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	681a      	ldr	r2, [r3, #0]
 80001b6:	697b      	ldr	r3, [r7, #20]
 80001b8:	615a      	str	r2, [r3, #20]
		my_list->head = task;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	697a      	ldr	r2, [r7, #20]
 80001be:	601a      	str	r2, [r3, #0]
		my_list->size++;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	1c5a      	adds	r2, r3, #1
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	609a      	str	r2, [r3, #8]
		return TaskID;
 80001ca:	6a3b      	ldr	r3, [r7, #32]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	e01e      	b.n	800020e <LIST_Add_Task+0xc2>
	} else if (cur == NULL) {
 80001d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d10e      	bne.n	80001f4 <LIST_Add_Task+0xa8>
		my_list->tail->next = task;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	697a      	ldr	r2, [r7, #20]
 80001dc:	615a      	str	r2, [r3, #20]
		my_list->tail = task;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	697a      	ldr	r2, [r7, #20]
 80001e2:	605a      	str	r2, [r3, #4]
		my_list->size++;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	1c5a      	adds	r2, r3, #1
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	609a      	str	r2, [r3, #8]
		return TaskID;
 80001ee:	6a3b      	ldr	r3, [r7, #32]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	e00c      	b.n	800020e <LIST_Add_Task+0xc2>
	} else {
		prev->next = task;
 80001f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f6:	697a      	ldr	r2, [r7, #20]
 80001f8:	615a      	str	r2, [r3, #20]
		task->next = cur;
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001fe:	615a      	str	r2, [r3, #20]
		my_list->size++;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	1c5a      	adds	r2, r3, #1
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	609a      	str	r2, [r3, #8]
		return TaskID;
 800020a:	6a3b      	ldr	r3, [r7, #32]
 800020c:	b2db      	uxtb	r3, r3
	}
}
 800020e:	4618      	mov	r0, r3
 8000210:	3718      	adds	r7, #24
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}

08000216 <LIST_Delete_Head_Task>:
    	return TaskID;
    }
    return TaskID;
}

unsigned char LIST_Delete_Head_Task(list* my_list) {
 8000216:	b580      	push	{r7, lr}
 8000218:	b086      	sub	sp, #24
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
    if (my_list->size <= 0) {
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d101      	bne.n	800022a <LIST_Delete_Head_Task+0x14>
        return SCH_MAX_TASK;
 8000226:	231e      	movs	r3, #30
 8000228:	e02f      	b.n	800028a <LIST_Delete_Head_Task+0x74>
    } else if (my_list->size == 1) {
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d116      	bne.n	8000260 <LIST_Delete_Head_Task+0x4a>
    	node* tmp = my_list->head;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	60fb      	str	r3, [r7, #12]
    	uint32_t TaskID = tmp->data.TaskID;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	60bb      	str	r3, [r7, #8]
        my_list->head = NULL;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
        my_list->tail = NULL;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	605a      	str	r2, [r3, #4]
        my_list->size--;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	1e5a      	subs	r2, r3, #1
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        free(tmp);
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f002 fc6f 	bl	8002b38 <free>
        return TaskID;
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	e014      	b.n	800028a <LIST_Delete_Head_Task+0x74>
    } else {
    	node*tmp = my_list->head;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	617b      	str	r3, [r7, #20]
    	uint32_t TaskID = tmp->data.TaskID;
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	613b      	str	r3, [r7, #16]
    	my_list->head = my_list->head->next;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
    	my_list->size--;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	1e5a      	subs	r2, r3, #1
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	609a      	str	r2, [r3, #8]
    	free(tmp);
 8000280:	6978      	ldr	r0, [r7, #20]
 8000282:	f002 fc59 	bl	8002b38 <free>
    	return TaskID;
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	b2db      	uxtb	r3, r3
    }
}
 800028a:	4618      	mov	r0, r3
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <blinkLed1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void blinkLed1() {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000298:	2120      	movs	r1, #32
 800029a:	4802      	ldr	r0, [pc, #8]	; (80002a4 <blinkLed1+0x10>)
 800029c:	f001 f806 	bl	80012ac <HAL_GPIO_TogglePin>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40010800 	.word	0x40010800

080002a8 <blinkLed2>:

void blinkLed2() {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	4802      	ldr	r0, [pc, #8]	; (80002b8 <blinkLed2+0x10>)
 80002b0:	f000 fffc 	bl	80012ac <HAL_GPIO_TogglePin>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40010800 	.word	0x40010800

080002bc <blinkLed3>:

void blinkLed3() {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <blinkLed3+0x10>)
 80002c4:	f000 fff2 	bl	80012ac <HAL_GPIO_TogglePin>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010800 	.word	0x40010800

080002d0 <blinkLed4>:

void blinkLed4() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80002d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d8:	4802      	ldr	r0, [pc, #8]	; (80002e4 <blinkLed4+0x14>)
 80002da:	f000 ffe7 	bl	80012ac <HAL_GPIO_TogglePin>
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010800 	.word	0x40010800

080002e8 <blinkLed5>:

void blinkLed5() {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80002ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f0:	4802      	ldr	r0, [pc, #8]	; (80002fc <blinkLed5+0x14>)
 80002f2:	f000 ffdb 	bl	80012ac <HAL_GPIO_TogglePin>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800

08000300 <oneshot>:

void oneshot() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000308:	4802      	ldr	r0, [pc, #8]	; (8000314 <oneshot+0x14>)
 800030a:	f000 ffcf 	bl	80012ac <HAL_GPIO_TogglePin>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010800 	.word	0x40010800

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031c:	f000 fc12 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000320:	f000 f844 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f000 f8f4 	bl	8000510 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000328:	f000 f87c 	bl	8000424 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800032c:	f000 f8c6 	bl	80004bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000330:	4817      	ldr	r0, [pc, #92]	; (8000390 <main+0x78>)
 8000332:	f001 fc3f 	bl	8001bb4 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000336:	f000 f931 	bl	800059c <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(blinkLed1, 0, 500);
 800033a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800033e:	2100      	movs	r1, #0
 8000340:	4814      	ldr	r0, [pc, #80]	; (8000394 <main+0x7c>)
 8000342:	f000 f965 	bl	8000610 <SCH_Add_Task>
  SCH_Add_Task(blinkLed2, 10, 1000);
 8000346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800034a:	210a      	movs	r1, #10
 800034c:	4812      	ldr	r0, [pc, #72]	; (8000398 <main+0x80>)
 800034e:	f000 f95f 	bl	8000610 <SCH_Add_Task>
  SCH_Add_Task(blinkLed3, 20, 1500);
 8000352:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000356:	2114      	movs	r1, #20
 8000358:	4810      	ldr	r0, [pc, #64]	; (800039c <main+0x84>)
 800035a:	f000 f959 	bl	8000610 <SCH_Add_Task>
  SCH_Add_Task(blinkLed4, 35, 2000);
 800035e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000362:	2123      	movs	r1, #35	; 0x23
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <main+0x88>)
 8000366:	f000 f953 	bl	8000610 <SCH_Add_Task>
  SCH_Add_Task(blinkLed5, 40, 2500);
 800036a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800036e:	2128      	movs	r1, #40	; 0x28
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <main+0x8c>)
 8000372:	f000 f94d 	bl	8000610 <SCH_Add_Task>
  SCH_Add_Task(oneshot, 1000, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <main+0x90>)
 800037e:	f000 f947 	bl	8000610 <SCH_Add_Task>
  setTimer1(1000);
 8000382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000386:	f000 fa5f 	bl	8000848 <setTimer1>
  while (1)
  {
	  SCH_Dispatch_Task();
 800038a:	f000 fa1f 	bl	80007cc <SCH_Dispatch_Task>
 800038e:	e7fc      	b.n	800038a <main+0x72>
 8000390:	20000090 	.word	0x20000090
 8000394:	08000295 	.word	0x08000295
 8000398:	080002a9 	.word	0x080002a9
 800039c:	080002bd 	.word	0x080002bd
 80003a0:	080002d1 	.word	0x080002d1
 80003a4:	080002e9 	.word	0x080002e9
 80003a8:	08000301 	.word	0x08000301

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b090      	sub	sp, #64	; 0x40
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fbc4 	bl	8002b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d2:	2301      	movs	r3, #1
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d6:	2310      	movs	r3, #16
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003da:	2300      	movs	r3, #0
 80003dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 ff7c 	bl	80012e0 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ee:	f000 f8cf 	bl	8000590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f001 f9ea 	bl	80017e4 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000416:	f000 f8bb 	bl	8000590 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3740      	adds	r7, #64	; 0x40
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000438:	463b      	mov	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <MX_TIM2_Init+0x94>)
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_TIM2_Init+0x94>)
 800044a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800044e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_TIM2_Init+0x94>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_TIM2_Init+0x94>)
 8000458:	220a      	movs	r2, #10
 800045a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MX_TIM2_Init+0x94>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_TIM2_Init+0x94>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000468:	4813      	ldr	r0, [pc, #76]	; (80004b8 <MX_TIM2_Init+0x94>)
 800046a:	f001 fb53 	bl	8001b14 <HAL_TIM_Base_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000474:	f000 f88c 	bl	8000590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800047e:	f107 0308 	add.w	r3, r7, #8
 8000482:	4619      	mov	r1, r3
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <MX_TIM2_Init+0x94>)
 8000486:	f001 fce9 	bl	8001e5c <HAL_TIM_ConfigClockSource>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000490:	f000 f87e 	bl	8000590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000494:	2300      	movs	r3, #0
 8000496:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049c:	463b      	mov	r3, r7
 800049e:	4619      	mov	r1, r3
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_TIM2_Init+0x94>)
 80004a2:	f001 feb1 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004ac:	f000 f870 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  CYCLE = 1/((8e6/(htim2.Init.Prescaler + 1))/htim2.Init.Period)*1000;
  /* USER CODE END TIM2_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000090 	.word	0x20000090

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <MX_USART2_UART_Init+0x50>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004f4:	f001 fef2 	bl	80022dc <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004fe:	f000 f847 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200000d8 	.word	0x200000d8
 800050c:	40004400 	.word	0x40004400

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_GPIO_Init+0x60>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <MX_GPIO_Init+0x60>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_GPIO_Init+0x60>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_GPIO_Init+0x64>)
 8000544:	f000 fe9a 	bl	800127c <HAL_GPIO_WritePin>
                          |LED5_Pin|LED_TEST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000548:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800054c:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED_TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	4619      	mov	r1, r3
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_GPIO_Init+0x64>)
 8000562:	f000 fd0f 	bl	8000f84 <HAL_GPIO_Init>

}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	SCH_Update_Task();
 8000580:	f000 f900 	bl	8000784 <SCH_Update_Task>
	timerRun();
 8000584:	f000 f97a 	bl	800087c <timerRun>
;}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x8>
	...

0800059c <SCH_Init>:
list my_list;
int32_t TaskID_arr[SCH_MAX_TASK];
uint32_t curID;
uint8_t dispatch;

void SCH_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    sTask* tmp = my_list.head;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <SCH_Init+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	603b      	str	r3, [r7, #0]
    while (tmp != NULL)
 80005a8:	e004      	b.n	80005b4 <SCH_Init+0x18>
    {
        SCH_Delete_Task(tmp->TaskID);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f8c8 	bl	8000744 <SCH_Delete_Task>
    while (tmp != NULL)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1f7      	bne.n	80005aa <SCH_Init+0xe>
    }
    for (int32_t i=0; i<SCH_MAX_TASK; i++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	e008      	b.n	80005d2 <SCH_Init+0x36>
        TaskID_arr[i] = -1;
 80005c0:	4a10      	ldr	r2, [pc, #64]	; (8000604 <SCH_Init+0x68>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int32_t i=0; i<SCH_MAX_TASK; i++) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b1d      	cmp	r3, #29
 80005d6:	ddf3      	ble.n	80005c0 <SCH_Init+0x24>
    }
    curID = 0;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SCH_Init+0x6c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
    dispatch = 0;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <SCH_Init+0x70>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
    my_list.head = NULL;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SCH_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
    my_list.tail = NULL;
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SCH_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
    my_list.size = 0;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <SCH_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000011c 	.word	0x2000011c
 8000604:	20000128 	.word	0x20000128
 8000608:	200001a0 	.word	0x200001a0
 800060c:	200001a4 	.word	0x200001a4

08000610 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b08e      	sub	sp, #56	; 0x38
 8000614:	af04      	add	r7, sp, #16
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
    uint32_t id_count = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
	node *cur = my_list.head, *prev = NULL, *last = NULL;
 8000620:	4b43      	ldr	r3, [pc, #268]	; (8000730 <SCH_Add_Task+0x120>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	623b      	str	r3, [r7, #32]
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]

    while (TaskID_arr[curID] != -1 && id_count < SCH_MAX_TASK)
 800062e:	e010      	b.n	8000652 <SCH_Add_Task+0x42>
    {
        curID = (curID+1)%SCH_MAX_TASK;
 8000630:	4b40      	ldr	r3, [pc, #256]	; (8000734 <SCH_Add_Task+0x124>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	1c59      	adds	r1, r3, #1
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <SCH_Add_Task+0x128>)
 8000638:	fba3 2301 	umull	r2, r3, r3, r1
 800063c:	091a      	lsrs	r2, r3, #4
 800063e:	4613      	mov	r3, r2
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1aca      	subs	r2, r1, r3
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <SCH_Add_Task+0x124>)
 800064a:	601a      	str	r2, [r3, #0]
        id_count++;
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	3301      	adds	r3, #1
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
    while (TaskID_arr[curID] != -1 && id_count < SCH_MAX_TASK)
 8000652:	4b38      	ldr	r3, [pc, #224]	; (8000734 <SCH_Add_Task+0x124>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a39      	ldr	r2, [pc, #228]	; (800073c <SCH_Add_Task+0x12c>)
 8000658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000660:	d002      	beq.n	8000668 <SCH_Add_Task+0x58>
 8000662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000664:	2b1d      	cmp	r3, #29
 8000666:	d9e3      	bls.n	8000630 <SCH_Add_Task+0x20>
    }

    if (id_count == SCH_MAX_TASK) {
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	2b1e      	cmp	r3, #30
 800066c:	d101      	bne.n	8000672 <SCH_Add_Task+0x62>
        return SCH_MAX_TASK;
 800066e:	231e      	movs	r3, #30
 8000670:	e059      	b.n	8000726 <SCH_Add_Task+0x116>
    }

    if (my_list.size == 0) {
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <SCH_Add_Task+0x120>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d113      	bne.n	80006a2 <SCH_Add_Task+0x92>
    	LIST_Add_Task(&my_list, pFunction, DELAY/CYCLE, PERIOD, curID, prev, cur);
 800067a:	4b31      	ldr	r3, [pc, #196]	; (8000740 <SCH_Add_Task+0x130>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	fbb3 f1f2 	udiv	r1, r3, r2
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <SCH_Add_Task+0x124>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6a3a      	ldr	r2, [r7, #32]
 800068c:	9202      	str	r2, [sp, #8]
 800068e:	69fa      	ldr	r2, [r7, #28]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	460a      	mov	r2, r1
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4825      	ldr	r0, [pc, #148]	; (8000730 <SCH_Add_Task+0x120>)
 800069c:	f7ff fd56 	bl	800014c <LIST_Add_Task>
 80006a0:	e036      	b.n	8000710 <SCH_Add_Task+0x100>
    } else {
    	uint32_t sum = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
    	while (DELAY >= sum + cur->data.DELAY && cur != NULL) {
 80006a6:	e009      	b.n	80006bc <SCH_Add_Task+0xac>
    		sum += cur->data.DELAY;
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	69ba      	ldr	r2, [r7, #24]
 80006ae:	4413      	add	r3, r2
 80006b0:	61bb      	str	r3, [r7, #24]
    		prev = cur;
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	61fb      	str	r3, [r7, #28]
    		cur = cur->next;
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	623b      	str	r3, [r7, #32]
    	while (DELAY >= sum + cur->data.DELAY && cur != NULL) {
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	4413      	add	r3, r2
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d302      	bcc.n	80006d0 <SCH_Add_Task+0xc0>
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1eb      	bne.n	80006a8 <SCH_Add_Task+0x98>
    	}
    	uint32_t DELAY_NEW = DELAY - sum;
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	613b      	str	r3, [r7, #16]
    	if (cur != NULL) {
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d005      	beq.n	80006ea <SCH_Add_Task+0xda>
    		cur->data.DELAY -= DELAY_NEW;
 80006de:	6a3b      	ldr	r3, [r7, #32]
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	605a      	str	r2, [r3, #4]
    	}
    	LIST_Add_Task(&my_list, pFunction, DELAY_NEW/CYCLE, PERIOD, curID, prev, cur);
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <SCH_Add_Task+0x130>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <SCH_Add_Task+0x124>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6a3a      	ldr	r2, [r7, #32]
 80006fc:	9202      	str	r2, [sp, #8]
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	460a      	mov	r2, r1
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <SCH_Add_Task+0x120>)
 800070c:	f7ff fd1e 	bl	800014c <LIST_Add_Task>
    }

    TaskID_arr[curID] = curID;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <SCH_Add_Task+0x124>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <SCH_Add_Task+0x124>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4611      	mov	r1, r2
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <SCH_Add_Task+0x12c>)
 800071c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return curID;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <SCH_Add_Task+0x124>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000011c 	.word	0x2000011c
 8000734:	200001a0 	.word	0x200001a0
 8000738:	88888889 	.word	0x88888889
 800073c:	20000128 	.word	0x20000128
 8000740:	20000000 	.word	0x20000000

08000744 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(uint32_t TaskID) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    if (TaskID_arr[TaskID] == -1) {
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <SCH_Delete_Task+0x38>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000758:	d101      	bne.n	800075e <SCH_Delete_Task+0x1a>
        return SCH_MAX_TASK;
 800075a:	231e      	movs	r3, #30
 800075c:	e00a      	b.n	8000774 <SCH_Delete_Task+0x30>
    }
    LIST_Delete_Head_Task(&my_list);
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <SCH_Delete_Task+0x3c>)
 8000760:	f7ff fd59 	bl	8000216 <LIST_Delete_Head_Task>
    TaskID_arr[TaskID] = -1;
 8000764:	4a05      	ldr	r2, [pc, #20]	; (800077c <SCH_Delete_Task+0x38>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return TaskID;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000128 	.word	0x20000128
 8000780:	2000011c 	.word	0x2000011c

08000784 <SCH_Update_Task>:

void SCH_Update_Task() {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
    node* tmp = my_list.head;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <SCH_Update_Task+0x40>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	607b      	str	r3, [r7, #4]
    if (tmp != NULL && dispatch == 0) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d010      	beq.n	80007b8 <SCH_Update_Task+0x34>
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <SCH_Update_Task+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10c      	bne.n	80007b8 <SCH_Update_Task+0x34>
        if (tmp->data.DELAY != 0) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d005      	beq.n	80007b2 <SCH_Update_Task+0x2e>
            tmp->data.DELAY--;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	605a      	str	r2, [r3, #4]
        } else {
        	dispatch = 1;
        }
    }
}
 80007b0:	e002      	b.n	80007b8 <SCH_Update_Task+0x34>
        	dispatch = 1;
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SCH_Update_Task+0x44>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	2000011c 	.word	0x2000011c
 80007c8:	200001a4 	.word	0x200001a4

080007cc <SCH_Dispatch_Task>:

void SCH_Dispatch_Task() {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
    node* tmp = my_list.head;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <SCH_Dispatch_Task+0x74>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	617b      	str	r3, [r7, #20]
    if (tmp->data.DELAY == 0 && tmp != NULL) {
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d12b      	bne.n	8000838 <SCH_Dispatch_Task+0x6c>
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d028      	beq.n	8000838 <SCH_Dispatch_Task+0x6c>
        (*tmp->data.pTask)();
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4798      	blx	r3
        if (tmp->data.PERIOD == 0) {
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d105      	bne.n	8000800 <SCH_Dispatch_Task+0x34>
            SCH_Delete_Task(tmp->data.TaskID);
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffa3 	bl	8000744 <SCH_Delete_Task>
            return;
 80007fe:	e01b      	b.n	8000838 <SCH_Dispatch_Task+0x6c>
        } else {
            void (*pTask) (void) = tmp->data.pTask;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	613b      	str	r3, [r7, #16]
            uint32_t DELAY = tmp->data.DELAY;
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	60fb      	str	r3, [r7, #12]
            uint32_t PERIOD = tmp->data.PERIOD;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	60bb      	str	r3, [r7, #8]
            uint32_t TaskID = tmp->data.TaskID;
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	607b      	str	r3, [r7, #4]
            uint8_t RunMe = tmp->data.RunMe;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	7c1b      	ldrb	r3, [r3, #16]
 800081c:	70fb      	strb	r3, [r7, #3]
            SCH_Delete_Task(tmp->data.TaskID);
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff8e 	bl	8000744 <SCH_Delete_Task>
            SCH_Add_Task(pTask, PERIOD, PERIOD);
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	68b9      	ldr	r1, [r7, #8]
 800082c:	6938      	ldr	r0, [r7, #16]
 800082e:	f7ff feef 	bl	8000610 <SCH_Add_Task>
        }
        dispatch = 0;
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SCH_Dispatch_Task+0x78>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
    }
}
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000011c 	.word	0x2000011c
 8000844:	200001a4 	.word	0x200001a4

08000848 <setTimer1>:
int timer1_counter = 0;
int timer2_counter = 0;
int timer1_flag = 0;
int timer2_flag = 0;

void setTimer1(int duration) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CYCLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <setTimer1+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	fb92 f3f3 	sdiv	r3, r2, r3
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <setTimer1+0x2c>)
 800085c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <setTimer1+0x30>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	200001a8 	.word	0x200001a8
 8000878:	200001b0 	.word	0x200001b0

0800087c <timerRun>:
void setTimer2(int duration) {
	timer2_counter = duration/CYCLE;
	timer2_flag = 0;
}

void timerRun() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <timerRun+0x4c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dd0b      	ble.n	80008a0 <timerRun+0x24>
		timer1_counter--;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <timerRun+0x4c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <timerRun+0x4c>)
 8000890:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <timerRun+0x4c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dc02      	bgt.n	80008a0 <timerRun+0x24>
			timer1_flag = 1;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <timerRun+0x50>)
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <timerRun+0x54>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dd0b      	ble.n	80008c0 <timerRun+0x44>
		timer2_counter--;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <timerRun+0x54>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <timerRun+0x54>)
 80008b0:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <timerRun+0x54>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	dc02      	bgt.n	80008c0 <timerRun+0x44>
			timer2_flag = 1;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <timerRun+0x58>)
 80008bc:	2201      	movs	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
		}
	}
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	200001a8 	.word	0x200001a8
 80008cc:	200001b0 	.word	0x200001b0
 80008d0:	200001ac 	.word	0x200001ac
 80008d4:	200001b4 	.word	0x200001b4

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_MspInit+0x40>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_MspInit+0x40>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_MspInit+0x40>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_MspInit+0x40>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_MspInit+0x40>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_MspInit+0x40>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800092c:	d113      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_TIM_Base_MspInit+0x44>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_TIM_Base_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_TIM_Base_MspInit+0x44>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	201c      	movs	r0, #28
 800094c:	f000 fa33 	bl	8000db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000950:	201c      	movs	r0, #28
 8000952:	f000 fa4c 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <HAL_UART_MspInit+0x98>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d137      	bne.n	80009f4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <HAL_UART_MspInit+0x9c>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <HAL_UART_MspInit+0x9c>)
 800098a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_UART_MspInit+0x9c>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0x9c>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x9c>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_UART_MspInit+0x9c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b4:	2304      	movs	r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	480f      	ldr	r0, [pc, #60]	; (8000a04 <HAL_UART_MspInit+0xa0>)
 80009c8:	f000 fadc 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009cc:	2308      	movs	r3, #8
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <HAL_UART_MspInit+0xa0>)
 80009e0:	f000 fad0 	bl	8000f84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2026      	movs	r0, #38	; 0x26
 80009ea:	f000 f9e4 	bl	8000db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ee:	2026      	movs	r0, #38	; 0x26
 80009f0:	f000 f9fd 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 f8bf 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <TIM2_IRQHandler+0x10>)
 8000a5e:	f001 f8f5 	bl	8001c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000090 	.word	0x20000090

08000a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <USART2_IRQHandler+0x10>)
 8000a72:	f001 fc81 	bl	8002378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000d8 	.word	0x200000d8

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f002 f810 	bl	8002ad4 <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20002800 	.word	0x20002800
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	200001b8 	.word	0x200001b8
 8000ae8:	200001d0 	.word	0x200001d0

08000aec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	; (8000b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	; (8000b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b1e:	f7ff ffe5 	bl	8000aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f001 ffdd 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b26:	f7ff fbf7 	bl	8000318 <main>
  bx lr
 8000b2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b34:	08002d94 	.word	0x08002d94
  ldr r2, =_sbss
 8000b38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b3c:	200001d0 	.word	0x200001d0

08000b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_2_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x28>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x28>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f923 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff feba 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f93b 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f903 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	200001bc 	.word	0x200001bc

08000bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	200001bc 	.word	0x200001bc

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <__NVIC_EnableIRQ+0x34>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff90 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff2d 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff42 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff90 	bl	8000cf8 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5f 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff35 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa2 	bl	8000d5c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d008      	beq.n	8000e4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e020      	b.n	8000e8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 020e 	bic.w	r2, r2, #14
 8000e58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d005      	beq.n	8000eba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e051      	b.n	8000f5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 020e 	bic.w	r2, r2, #14
 8000ec8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_DMA_Abort_IT+0xd0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d029      	beq.n	8000f38 <HAL_DMA_Abort_IT+0xa0>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_DMA_Abort_IT+0xd4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d022      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x9c>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <HAL_DMA_Abort_IT+0xd8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d01a      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x96>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_DMA_Abort_IT+0xdc>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d012      	beq.n	8000f28 <HAL_DMA_Abort_IT+0x90>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_DMA_Abort_IT+0xe0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00a      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x8a>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <HAL_DMA_Abort_IT+0xe4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d102      	bne.n	8000f1c <HAL_DMA_Abort_IT+0x84>
 8000f16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f1a:	e00e      	b.n	8000f3a <HAL_DMA_Abort_IT+0xa2>
 8000f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f20:	e00b      	b.n	8000f3a <HAL_DMA_Abort_IT+0xa2>
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f26:	e008      	b.n	8000f3a <HAL_DMA_Abort_IT+0xa2>
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	e005      	b.n	8000f3a <HAL_DMA_Abort_IT+0xa2>
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	e002      	b.n	8000f3a <HAL_DMA_Abort_IT+0xa2>
 8000f34:	2310      	movs	r3, #16
 8000f36:	e000      	b.n	8000f3a <HAL_DMA_Abort_IT+0xa2>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <HAL_DMA_Abort_IT+0xe8>)
 8000f3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
    } 
  }
  return status;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020008 	.word	0x40020008
 8000f6c:	4002001c 	.word	0x4002001c
 8000f70:	40020030 	.word	0x40020030
 8000f74:	40020044 	.word	0x40020044
 8000f78:	40020058 	.word	0x40020058
 8000f7c:	4002006c 	.word	0x4002006c
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	e161      	b.n	800125c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8150 	bne.w	8001256 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a97      	ldr	r2, [pc, #604]	; (8001218 <HAL_GPIO_Init+0x294>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d05e      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a95      	ldr	r2, [pc, #596]	; (8001218 <HAL_GPIO_Init+0x294>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d875      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fc6:	4a95      	ldr	r2, [pc, #596]	; (800121c <HAL_GPIO_Init+0x298>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d058      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fcc:	4a93      	ldr	r2, [pc, #588]	; (800121c <HAL_GPIO_Init+0x298>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d86f      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fd2:	4a93      	ldr	r2, [pc, #588]	; (8001220 <HAL_GPIO_Init+0x29c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d052      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fd8:	4a91      	ldr	r2, [pc, #580]	; (8001220 <HAL_GPIO_Init+0x29c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d869      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fde:	4a91      	ldr	r2, [pc, #580]	; (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d04c      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fe4:	4a8f      	ldr	r2, [pc, #572]	; (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d863      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fea:	4a8f      	ldr	r2, [pc, #572]	; (8001228 <HAL_GPIO_Init+0x2a4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d046      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000ff0:	4a8d      	ldr	r2, [pc, #564]	; (8001228 <HAL_GPIO_Init+0x2a4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d85d      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d82a      	bhi.n	8001050 <HAL_GPIO_Init+0xcc>
 8000ffa:	2b12      	cmp	r3, #18
 8000ffc:	d859      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <HAL_GPIO_Init+0x80>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	0800107f 	.word	0x0800107f
 8001008:	08001059 	.word	0x08001059
 800100c:	0800106b 	.word	0x0800106b
 8001010:	080010ad 	.word	0x080010ad
 8001014:	080010b3 	.word	0x080010b3
 8001018:	080010b3 	.word	0x080010b3
 800101c:	080010b3 	.word	0x080010b3
 8001020:	080010b3 	.word	0x080010b3
 8001024:	080010b3 	.word	0x080010b3
 8001028:	080010b3 	.word	0x080010b3
 800102c:	080010b3 	.word	0x080010b3
 8001030:	080010b3 	.word	0x080010b3
 8001034:	080010b3 	.word	0x080010b3
 8001038:	080010b3 	.word	0x080010b3
 800103c:	080010b3 	.word	0x080010b3
 8001040:	080010b3 	.word	0x080010b3
 8001044:	080010b3 	.word	0x080010b3
 8001048:	08001061 	.word	0x08001061
 800104c:	08001075 	.word	0x08001075
 8001050:	4a76      	ldr	r2, [pc, #472]	; (800122c <HAL_GPIO_Init+0x2a8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001056:	e02c      	b.n	80010b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e029      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e024      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	3308      	adds	r3, #8
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e01f      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	330c      	adds	r3, #12
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e01a      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001086:	2304      	movs	r3, #4
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e013      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	611a      	str	r2, [r3, #16]
          break;
 800109e:	e009      	b.n	80010b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	615a      	str	r2, [r3, #20]
          break;
 80010aa:	e003      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          break;
 80010b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2bff      	cmp	r3, #255	; 0xff
 80010b8:	d801      	bhi.n	80010be <HAL_GPIO_Init+0x13a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_Init+0x13e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3304      	adds	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d802      	bhi.n	80010d0 <HAL_GPIO_Init+0x14c>
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x152>
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	3b08      	subs	r3, #8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	210f      	movs	r1, #15
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	6a39      	ldr	r1, [r7, #32]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80a9 	beq.w	8001256 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001104:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <HAL_GPIO_Init+0x2ac>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x2ac>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_GPIO_Init+0x2ac>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800111c:	4a45      	ldr	r2, [pc, #276]	; (8001234 <HAL_GPIO_Init+0x2b0>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3d      	ldr	r2, [pc, #244]	; (8001238 <HAL_GPIO_Init+0x2b4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d00d      	beq.n	8001164 <HAL_GPIO_Init+0x1e0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a3c      	ldr	r2, [pc, #240]	; (800123c <HAL_GPIO_Init+0x2b8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x1dc>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3b      	ldr	r2, [pc, #236]	; (8001240 <HAL_GPIO_Init+0x2bc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_GPIO_Init+0x1d8>
 8001158:	2302      	movs	r3, #2
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1e2>
 800115c:	2303      	movs	r3, #3
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1e2>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1e2>
 8001164:	2300      	movs	r3, #0
 8001166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001176:	492f      	ldr	r1, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x2b0>)
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	492b      	ldr	r1, [pc, #172]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4927      	ldr	r1, [pc, #156]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4921      	ldr	r1, [pc, #132]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	491d      	ldr	r1, [pc, #116]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	4917      	ldr	r1, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4913      	ldr	r1, [pc, #76]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01f      	beq.n	8001248 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	490d      	ldr	r1, [pc, #52]	; (8001244 <HAL_GPIO_Init+0x2c0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
 8001214:	e01f      	b.n	8001256 <HAL_GPIO_Init+0x2d2>
 8001216:	bf00      	nop
 8001218:	10320000 	.word	0x10320000
 800121c:	10310000 	.word	0x10310000
 8001220:	10220000 	.word	0x10220000
 8001224:	10210000 	.word	0x10210000
 8001228:	10120000 	.word	0x10120000
 800122c:	10110000 	.word	0x10110000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00
 8001240:	40011000 	.word	0x40011000
 8001244:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_GPIO_Init+0x2f4>)
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	43db      	mvns	r3, r3
 8001250:	4909      	ldr	r1, [pc, #36]	; (8001278 <HAL_GPIO_Init+0x2f4>)
 8001252:	4013      	ands	r3, r2
 8001254:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	3301      	adds	r3, #1
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	fa22 f303 	lsr.w	r3, r2, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	f47f ae96 	bne.w	8000f98 <HAL_GPIO_Init+0x14>
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	372c      	adds	r7, #44	; 0x2c
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001298:	e003      	b.n	80012a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43d9      	mvns	r1, r3
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	400b      	ands	r3, r1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e272      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
 8001318:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x12c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e24c      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x76>
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xbc>
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc1a 	bl	8000bf4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fc16 	bl	8000bf4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e200      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe4>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc06 	bl	8000bf4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fc02 	bl	8000bf4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1ec      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x10c>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1c0      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4939      	ldr	r1, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fbbb 	bl	8000bf4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fbb7 	bl	8000bf4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1a1      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb9a 	bl	8000bf4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fb96 	bl	8000bf4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e180      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03a      	beq.n	8001564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d019      	beq.n	800152a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb7a 	bl	8000bf4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fb76 	bl	8000bf4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e160      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 fad8 	bl	8001ad8 <RCC_Delay>
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fb60 	bl	8000bf4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fb5c 	bl	8000bf4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d908      	bls.n	8001558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e146      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	42420000 	.word	0x42420000
 8001554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e9      	bne.n	8001538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a6 	beq.w	80016be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb1d 	bl	8000bf4 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff fb19 	bl	8000bf4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e103      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x4c8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015e4:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e02d      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x334>
 80015fa:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a69      	ldr	r2, [pc, #420]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a66      	ldr	r2, [pc, #408]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01c      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x356>
 800161c:	4b61      	ldr	r3, [pc, #388]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a60      	ldr	r2, [pc, #384]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a5d      	ldr	r2, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001636:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d015      	beq.n	8001682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff facd 	bl	8000bf4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fac9 	bl	8000bf4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0b1      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCC_OscConfig+0x37e>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fab7 	bl	8000bf4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fab3 	bl	8000bf4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e09b      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ee      	bne.n	800168a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d105      	bne.n	80016be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b2:	4b3c      	ldr	r3, [pc, #240]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8087 	beq.w	80017d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d061      	beq.n	8001798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d146      	bne.n	800176a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <HAL_RCC_OscConfig+0x4cc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa87 	bl	8000bf4 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fa83 	bl	8000bf4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e06d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d108      	bne.n	8001724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4921      	ldr	r1, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a19      	ldr	r1, [r3, #32]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	430b      	orrs	r3, r1
 8001736:	491b      	ldr	r1, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x4cc>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fa57 	bl	8000bf4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff fa53 	bl	8000bf4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e03d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
 8001768:	e035      	b.n	80017d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x4cc>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fa40 	bl	8000bf4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fa3c 	bl	8000bf4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e026      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x498>
 8001796:	e01e      	b.n	80017d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e019      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x500>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0d0      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d910      	bls.n	8001828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 0207 	bic.w	r2, r3, #7
 800180e:	4965      	ldr	r1, [pc, #404]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b8      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001862:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d040      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07f      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e073      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06b      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4936      	ldr	r1, [pc, #216]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff f98e 	bl	8000bf4 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff f98a 	bl	8000bf4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e053      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d210      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0207 	bic.w	r2, r3, #7
 800191a:	4922      	ldr	r1, [pc, #136]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e032      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4916      	ldr	r1, [pc, #88]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001972:	f000 f821 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1cc>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f8ec 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08002d74 	.word	0x08002d74
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000008 	.word	0x20000008

080019b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b8:	b490      	push	{r4, r7}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xac>)
 80019c0:	1d3c      	adds	r4, r7, #4
 80019c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c8:	f240 2301 	movw	r3, #513	; 0x201
 80019cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d002      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x40>
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0x46>
 80019f6:	e02b      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019fa:	623b      	str	r3, [r7, #32]
      break;
 80019fc:	e02b      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	0c9b      	lsrs	r3, r3, #18
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3328      	adds	r3, #40	; 0x28
 8001a08:	443b      	add	r3, r7
 8001a0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d012      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0c5b      	lsrs	r3, r3, #17
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	3328      	adds	r3, #40	; 0x28
 8001a26:	443b      	add	r3, r7
 8001a28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a32:	fb03 f202 	mul.w	r2, r3, r2
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e004      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	623b      	str	r3, [r7, #32]
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a52:	623b      	str	r3, [r7, #32]
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6a3b      	ldr	r3, [r7, #32]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc90      	pop	{r4, r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08002d64 	.word	0x08002d64
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	007a1200 	.word	0x007a1200
 8001a70:	003d0900 	.word	0x003d0900

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08002d84 	.word	0x08002d84

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0adb      	lsrs	r3, r3, #11
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	08002d84 	.word	0x08002d84

08001ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <RCC_Delay+0x34>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <RCC_Delay+0x38>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af4:	bf00      	nop
  }
  while (Delay --);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <RCC_Delay+0x1c>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e041      	b.n	8001baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe feee 	bl	800091c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 fa6a 	bl	800202c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d001      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e035      	b.n	8001c38 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_TIM_Base_Start_IT+0x90>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x4e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf6:	d004      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x4e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_TIM_Base_Start_IT+0x94>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d111      	bne.n	8001c26 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d010      	beq.n	8001c36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c24:	e007      	b.n	8001c36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40012c00 	.word	0x40012c00
 8001c48:	40000400 	.word	0x40000400

08001c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d122      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0202 	mvn.w	r2, #2
 8001c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f9b1 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f9a4 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f9b3 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0204 	mvn.w	r2, #4
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f987 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f97a 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f989 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0208 	mvn.w	r2, #8
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2204      	movs	r2, #4
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f95d 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f950 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f95f 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0210 	mvn.w	r2, #16
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f933 	bl	8001ff6 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f926 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f935 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0201 	mvn.w	r2, #1
 8001dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fbd4 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b80      	cmp	r3, #128	; 0x80
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d107      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa67 	bl	80022ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	2b40      	cmp	r3, #64	; 0x40
 8001e08:	d10e      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e14:	2b40      	cmp	r3, #64	; 0x40
 8001e16:	d107      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8f9 	bl	800201a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d10e      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d107      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0220 	mvn.w	r2, #32
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fa32 	bl	80022b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_TIM_ConfigClockSource+0x18>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e0b3      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x180>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eac:	d03e      	beq.n	8001f2c <HAL_TIM_ConfigClockSource+0xd0>
 8001eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb2:	f200 8087 	bhi.w	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eba:	f000 8085 	beq.w	8001fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec2:	d87f      	bhi.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001ec4:	2b70      	cmp	r3, #112	; 0x70
 8001ec6:	d01a      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0xa2>
 8001ec8:	2b70      	cmp	r3, #112	; 0x70
 8001eca:	d87b      	bhi.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001ecc:	2b60      	cmp	r3, #96	; 0x60
 8001ece:	d050      	beq.n	8001f72 <HAL_TIM_ConfigClockSource+0x116>
 8001ed0:	2b60      	cmp	r3, #96	; 0x60
 8001ed2:	d877      	bhi.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001ed4:	2b50      	cmp	r3, #80	; 0x50
 8001ed6:	d03c      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0xf6>
 8001ed8:	2b50      	cmp	r3, #80	; 0x50
 8001eda:	d873      	bhi.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001edc:	2b40      	cmp	r3, #64	; 0x40
 8001ede:	d058      	beq.n	8001f92 <HAL_TIM_ConfigClockSource+0x136>
 8001ee0:	2b40      	cmp	r3, #64	; 0x40
 8001ee2:	d86f      	bhi.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001ee4:	2b30      	cmp	r3, #48	; 0x30
 8001ee6:	d064      	beq.n	8001fb2 <HAL_TIM_ConfigClockSource+0x156>
 8001ee8:	2b30      	cmp	r3, #48	; 0x30
 8001eea:	d86b      	bhi.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d060      	beq.n	8001fb2 <HAL_TIM_ConfigClockSource+0x156>
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d867      	bhi.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05c      	beq.n	8001fb2 <HAL_TIM_ConfigClockSource+0x156>
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d05a      	beq.n	8001fb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001efc:	e062      	b.n	8001fc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f000 f95c 	bl	80021ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	609a      	str	r2, [r3, #8]
      break;
 8001f2a:	e04e      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f000 f945 	bl	80021ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f4e:	609a      	str	r2, [r3, #8]
      break;
 8001f50:	e03b      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f000 f8bc 	bl	80020dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2150      	movs	r1, #80	; 0x50
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f913 	bl	8002196 <TIM_ITRx_SetConfig>
      break;
 8001f70:	e02b      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f000 f8da 	bl	8002138 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2160      	movs	r1, #96	; 0x60
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f903 	bl	8002196 <TIM_ITRx_SetConfig>
      break;
 8001f90:	e01b      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f000 f89c 	bl	80020dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2140      	movs	r1, #64	; 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f8f3 	bl	8002196 <TIM_ITRx_SetConfig>
      break;
 8001fb0:	e00b      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	f000 f8ea 	bl	8002196 <TIM_ITRx_SetConfig>
        break;
 8001fc2:	e002      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001fc4:	bf00      	nop
 8001fc6:	e000      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001fc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <TIM_Base_SetConfig+0xa8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <TIM_Base_SetConfig+0x28>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x28>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <TIM_Base_SetConfig+0xac>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <TIM_Base_SetConfig+0xa8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <TIM_Base_SetConfig+0x52>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d003      	beq.n	800207e <TIM_Base_SetConfig+0x52>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <TIM_Base_SetConfig+0xac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d108      	bne.n	8002090 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <TIM_Base_SetConfig+0xa8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d103      	bne.n	80020c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	615a      	str	r2, [r3, #20]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400

080020dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	f023 0201 	bic.w	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f023 030a 	bic.w	r3, r3, #10
 8002118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	621a      	str	r2, [r3, #32]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f023 0210 	bic.w	r2, r3, #16
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002162:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	031b      	lsls	r3, r3, #12
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002174:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	621a      	str	r2, [r3, #32]
}
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f043 0307 	orr.w	r3, r3, #7
 80021b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	609a      	str	r2, [r3, #8]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b087      	sub	sp, #28
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	021a      	lsls	r2, r3, #8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	609a      	str	r2, [r3, #8]
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800221c:	2302      	movs	r3, #2
 800221e:	e041      	b.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226c:	d004      	beq.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d10c      	bne.n	8002292 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800227e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40012c00 	.word	0x40012c00
 80022b4:	40000400 	.word	0x40000400

080022b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e03f      	b.n	800236e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fb2e 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fb49 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10d      	bne.n	80023ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_UART_IRQHandler+0x52>
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa4f 	bl	8002866 <UART_Receive_IT>
      return;
 80023c8:	e17b      	b.n	80026c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80b1 	beq.w	8002534 <HAL_UART_IRQHandler+0x1bc>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_UART_IRQHandler+0x70>
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80a6 	beq.w	8002534 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_UART_IRQHandler+0x90>
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_UART_IRQHandler+0xb0>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f043 0202 	orr.w	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_UART_IRQHandler+0xd0>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0204 	orr.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00f      	beq.n	8002472 <HAL_UART_IRQHandler+0xfa>
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <HAL_UART_IRQHandler+0xee>
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f043 0208 	orr.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 811e 	beq.w	80026b8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_UART_IRQHandler+0x11e>
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f9e8 	bl	8002866 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <HAL_UART_IRQHandler+0x146>
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d031      	beq.n	8002522 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f92a 	bl	8002718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d023      	beq.n	800251a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d013      	beq.n	8002512 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	4a76      	ldr	r2, [pc, #472]	; (80026c8 <HAL_UART_IRQHandler+0x350>)
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fcce 	bl	8000e98 <HAL_DMA_Abort_IT>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800250c:	4610      	mov	r0, r2
 800250e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002510:	e00e      	b.n	8002530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8ec 	bl	80026f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	e00a      	b.n	8002530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8e8 	bl	80026f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	e006      	b.n	8002530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8e4 	bl	80026f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800252e:	e0c3      	b.n	80026b8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	bf00      	nop
    return;
 8002532:	e0c1      	b.n	80026b8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 80a1 	bne.w	8002680 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 809b 	beq.w	8002680 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8095 	beq.w	8002680 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04e      	beq.n	8002618 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002584:	8a3b      	ldrh	r3, [r7, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8098 	beq.w	80026bc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002590:	8a3a      	ldrh	r2, [r7, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	f080 8092 	bcs.w	80026bc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8a3a      	ldrh	r2, [r7, #16]
 800259c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d02b      	beq.n	8002600 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0210 	bic.w	r2, r2, #16
 80025f4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fc11 	bl	8000e22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002608:	b29b      	uxth	r3, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	b29b      	uxth	r3, r3
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f876 	bl	8002702 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002616:	e051      	b.n	80026bc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002620:	b29b      	uxth	r3, r3
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d047      	beq.n	80026c0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002630:	8a7b      	ldrh	r3, [r7, #18]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d044      	beq.n	80026c0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002644:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0210 	bic.w	r2, r2, #16
 8002672:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002674:	8a7b      	ldrh	r3, [r7, #18]
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f842 	bl	8002702 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800267e:	e01f      	b.n	80026c0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_UART_IRQHandler+0x324>
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f87f 	bl	8002798 <UART_Transmit_IT>
    return;
 800269a:	e012      	b.n	80026c2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_UART_IRQHandler+0x34a>
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f8c0 	bl	8002836 <UART_EndTransmit_IT>
    return;
 80026b6:	e004      	b.n	80026c2 <HAL_UART_IRQHandler+0x34a>
    return;
 80026b8:	bf00      	nop
 80026ba:	e002      	b.n	80026c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80026c0:	bf00      	nop
  }
}
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	08002771 	.word	0x08002771

080026cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800272e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	2b01      	cmp	r3, #1
 8002746:	d107      	bne.n	8002758 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0210 	bic.w	r2, r2, #16
 8002756:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff ffb0 	bl	80026f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b21      	cmp	r3, #33	; 0x21
 80027aa:	d13e      	bne.n	800282a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b4:	d114      	bne.n	80027e0 <UART_Transmit_IT+0x48>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d110      	bne.n	80027e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	1c9a      	adds	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	621a      	str	r2, [r3, #32]
 80027de:	e008      	b.n	80027f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	1c59      	adds	r1, r3, #1
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6211      	str	r1, [r2, #32]
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4619      	mov	r1, r3
 8002800:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002814:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002824:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff38 	bl	80026cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b22      	cmp	r3, #34	; 0x22
 8002878:	f040 8099 	bne.w	80029ae <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d117      	bne.n	80028b6 <UART_Receive_IT+0x50>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d113      	bne.n	80028b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
 80028b4:	e026      	b.n	8002904 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c8:	d007      	beq.n	80028da <UART_Receive_IT+0x74>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <UART_Receive_IT+0x82>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e008      	b.n	80028fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002914:	2b00      	cmp	r3, #0
 8002916:	d148      	bne.n	80029aa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0220 	bic.w	r2, r2, #32
 8002926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2b01      	cmp	r3, #1
 8002956:	d123      	bne.n	80029a0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0210 	bic.w	r2, r2, #16
 800296c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d10a      	bne.n	8002992 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff feb2 	bl	8002702 <HAL_UARTEx_RxEventCallback>
 800299e:	e002      	b.n	80029a6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe9c 	bl	80026de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e002      	b.n	80029b0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029f2:	f023 030c 	bic.w	r3, r3, #12
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <UART_SetConfig+0x114>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d103      	bne.n	8002a28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a20:	f7ff f846 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	e002      	b.n	8002a2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a28:	f7ff f82e 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	0119      	lsls	r1, r3, #4
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a66:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2064      	movs	r0, #100	; 0x64
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	3332      	adds	r3, #50	; 0x32
 8002a78:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	4419      	add	r1, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2064      	movs	r0, #100	; 0x64
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <UART_SetConfig+0x118>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	51eb851f 	.word	0x51eb851f

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000010 	.word	0x20000010

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	4d0c      	ldr	r5, [pc, #48]	; (8002b18 <__libc_init_array+0x38>)
 8002ae6:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	f000 f92c 	bl	8002d4c <_init>
 8002af4:	2600      	movs	r6, #0
 8002af6:	4d0a      	ldr	r5, [pc, #40]	; (8002b20 <__libc_init_array+0x40>)
 8002af8:	4c0a      	ldr	r4, [pc, #40]	; (8002b24 <__libc_init_array+0x44>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	08002d8c 	.word	0x08002d8c
 8002b1c:	08002d8c 	.word	0x08002d8c
 8002b20:	08002d8c 	.word	0x08002d8c
 8002b24:	08002d90 	.word	0x08002d90

08002b28 <malloc>:
 8002b28:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <malloc+0xc>)
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	f000 b87b 	b.w	8002c28 <_malloc_r>
 8002b32:	bf00      	nop
 8002b34:	20000010 	.word	0x20000010

08002b38 <free>:
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <free+0xc>)
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	f000 b80b 	b.w	8002b58 <_free_r>
 8002b42:	bf00      	nop
 8002b44:	20000010 	.word	0x20000010

08002b48 <memset>:
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4402      	add	r2, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <_free_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	d040      	beq.n	8002be2 <_free_r+0x8a>
 8002b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b64:	1f0c      	subs	r4, r1, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bfb8      	it	lt
 8002b6a:	18e4      	addlt	r4, r4, r3
 8002b6c:	f000 f8e0 	bl	8002d30 <__malloc_lock>
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <_free_r+0x8c>)
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	b933      	cbnz	r3, 8002b84 <_free_r+0x2c>
 8002b76:	6063      	str	r3, [r4, #4]
 8002b78:	6014      	str	r4, [r2, #0]
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b80:	f000 b8dc 	b.w	8002d3c <__malloc_unlock>
 8002b84:	42a3      	cmp	r3, r4
 8002b86:	d908      	bls.n	8002b9a <_free_r+0x42>
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	1821      	adds	r1, r4, r0
 8002b8c:	428b      	cmp	r3, r1
 8002b8e:	bf01      	itttt	eq
 8002b90:	6819      	ldreq	r1, [r3, #0]
 8002b92:	685b      	ldreq	r3, [r3, #4]
 8002b94:	1809      	addeq	r1, r1, r0
 8002b96:	6021      	streq	r1, [r4, #0]
 8002b98:	e7ed      	b.n	8002b76 <_free_r+0x1e>
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	b10b      	cbz	r3, 8002ba4 <_free_r+0x4c>
 8002ba0:	42a3      	cmp	r3, r4
 8002ba2:	d9fa      	bls.n	8002b9a <_free_r+0x42>
 8002ba4:	6811      	ldr	r1, [r2, #0]
 8002ba6:	1850      	adds	r0, r2, r1
 8002ba8:	42a0      	cmp	r0, r4
 8002baa:	d10b      	bne.n	8002bc4 <_free_r+0x6c>
 8002bac:	6820      	ldr	r0, [r4, #0]
 8002bae:	4401      	add	r1, r0
 8002bb0:	1850      	adds	r0, r2, r1
 8002bb2:	4283      	cmp	r3, r0
 8002bb4:	6011      	str	r1, [r2, #0]
 8002bb6:	d1e0      	bne.n	8002b7a <_free_r+0x22>
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4401      	add	r1, r0
 8002bbe:	6011      	str	r1, [r2, #0]
 8002bc0:	6053      	str	r3, [r2, #4]
 8002bc2:	e7da      	b.n	8002b7a <_free_r+0x22>
 8002bc4:	d902      	bls.n	8002bcc <_free_r+0x74>
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	602b      	str	r3, [r5, #0]
 8002bca:	e7d6      	b.n	8002b7a <_free_r+0x22>
 8002bcc:	6820      	ldr	r0, [r4, #0]
 8002bce:	1821      	adds	r1, r4, r0
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	bf01      	itttt	eq
 8002bd4:	6819      	ldreq	r1, [r3, #0]
 8002bd6:	685b      	ldreq	r3, [r3, #4]
 8002bd8:	1809      	addeq	r1, r1, r0
 8002bda:	6021      	streq	r1, [r4, #0]
 8002bdc:	6063      	str	r3, [r4, #4]
 8002bde:	6054      	str	r4, [r2, #4]
 8002be0:	e7cb      	b.n	8002b7a <_free_r+0x22>
 8002be2:	bd38      	pop	{r3, r4, r5, pc}
 8002be4:	200001c0 	.word	0x200001c0

08002be8 <sbrk_aligned>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	4e0e      	ldr	r6, [pc, #56]	; (8002c24 <sbrk_aligned+0x3c>)
 8002bec:	460c      	mov	r4, r1
 8002bee:	6831      	ldr	r1, [r6, #0]
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	b911      	cbnz	r1, 8002bfa <sbrk_aligned+0x12>
 8002bf4:	f000 f88c 	bl	8002d10 <_sbrk_r>
 8002bf8:	6030      	str	r0, [r6, #0]
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 f887 	bl	8002d10 <_sbrk_r>
 8002c02:	1c43      	adds	r3, r0, #1
 8002c04:	d00a      	beq.n	8002c1c <sbrk_aligned+0x34>
 8002c06:	1cc4      	adds	r4, r0, #3
 8002c08:	f024 0403 	bic.w	r4, r4, #3
 8002c0c:	42a0      	cmp	r0, r4
 8002c0e:	d007      	beq.n	8002c20 <sbrk_aligned+0x38>
 8002c10:	1a21      	subs	r1, r4, r0
 8002c12:	4628      	mov	r0, r5
 8002c14:	f000 f87c 	bl	8002d10 <_sbrk_r>
 8002c18:	3001      	adds	r0, #1
 8002c1a:	d101      	bne.n	8002c20 <sbrk_aligned+0x38>
 8002c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c20:	4620      	mov	r0, r4
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	200001c4 	.word	0x200001c4

08002c28 <_malloc_r>:
 8002c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c2c:	1ccd      	adds	r5, r1, #3
 8002c2e:	f025 0503 	bic.w	r5, r5, #3
 8002c32:	3508      	adds	r5, #8
 8002c34:	2d0c      	cmp	r5, #12
 8002c36:	bf38      	it	cc
 8002c38:	250c      	movcc	r5, #12
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	db01      	blt.n	8002c44 <_malloc_r+0x1c>
 8002c40:	42a9      	cmp	r1, r5
 8002c42:	d905      	bls.n	8002c50 <_malloc_r+0x28>
 8002c44:	230c      	movs	r3, #12
 8002c46:	2600      	movs	r6, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c50:	4e2e      	ldr	r6, [pc, #184]	; (8002d0c <_malloc_r+0xe4>)
 8002c52:	f000 f86d 	bl	8002d30 <__malloc_lock>
 8002c56:	6833      	ldr	r3, [r6, #0]
 8002c58:	461c      	mov	r4, r3
 8002c5a:	bb34      	cbnz	r4, 8002caa <_malloc_r+0x82>
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4638      	mov	r0, r7
 8002c60:	f7ff ffc2 	bl	8002be8 <sbrk_aligned>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	4604      	mov	r4, r0
 8002c68:	d14d      	bne.n	8002d06 <_malloc_r+0xde>
 8002c6a:	6834      	ldr	r4, [r6, #0]
 8002c6c:	4626      	mov	r6, r4
 8002c6e:	2e00      	cmp	r6, #0
 8002c70:	d140      	bne.n	8002cf4 <_malloc_r+0xcc>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	4631      	mov	r1, r6
 8002c76:	4638      	mov	r0, r7
 8002c78:	eb04 0803 	add.w	r8, r4, r3
 8002c7c:	f000 f848 	bl	8002d10 <_sbrk_r>
 8002c80:	4580      	cmp	r8, r0
 8002c82:	d13a      	bne.n	8002cfa <_malloc_r+0xd2>
 8002c84:	6821      	ldr	r1, [r4, #0]
 8002c86:	3503      	adds	r5, #3
 8002c88:	1a6d      	subs	r5, r5, r1
 8002c8a:	f025 0503 	bic.w	r5, r5, #3
 8002c8e:	3508      	adds	r5, #8
 8002c90:	2d0c      	cmp	r5, #12
 8002c92:	bf38      	it	cc
 8002c94:	250c      	movcc	r5, #12
 8002c96:	4638      	mov	r0, r7
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f7ff ffa5 	bl	8002be8 <sbrk_aligned>
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d02b      	beq.n	8002cfa <_malloc_r+0xd2>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	442b      	add	r3, r5
 8002ca6:	6023      	str	r3, [r4, #0]
 8002ca8:	e00e      	b.n	8002cc8 <_malloc_r+0xa0>
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	1b52      	subs	r2, r2, r5
 8002cae:	d41e      	bmi.n	8002cee <_malloc_r+0xc6>
 8002cb0:	2a0b      	cmp	r2, #11
 8002cb2:	d916      	bls.n	8002ce2 <_malloc_r+0xba>
 8002cb4:	1961      	adds	r1, r4, r5
 8002cb6:	42a3      	cmp	r3, r4
 8002cb8:	6025      	str	r5, [r4, #0]
 8002cba:	bf18      	it	ne
 8002cbc:	6059      	strne	r1, [r3, #4]
 8002cbe:	6863      	ldr	r3, [r4, #4]
 8002cc0:	bf08      	it	eq
 8002cc2:	6031      	streq	r1, [r6, #0]
 8002cc4:	5162      	str	r2, [r4, r5]
 8002cc6:	604b      	str	r3, [r1, #4]
 8002cc8:	4638      	mov	r0, r7
 8002cca:	f104 060b 	add.w	r6, r4, #11
 8002cce:	f000 f835 	bl	8002d3c <__malloc_unlock>
 8002cd2:	f026 0607 	bic.w	r6, r6, #7
 8002cd6:	1d23      	adds	r3, r4, #4
 8002cd8:	1af2      	subs	r2, r6, r3
 8002cda:	d0b6      	beq.n	8002c4a <_malloc_r+0x22>
 8002cdc:	1b9b      	subs	r3, r3, r6
 8002cde:	50a3      	str	r3, [r4, r2]
 8002ce0:	e7b3      	b.n	8002c4a <_malloc_r+0x22>
 8002ce2:	6862      	ldr	r2, [r4, #4]
 8002ce4:	42a3      	cmp	r3, r4
 8002ce6:	bf0c      	ite	eq
 8002ce8:	6032      	streq	r2, [r6, #0]
 8002cea:	605a      	strne	r2, [r3, #4]
 8002cec:	e7ec      	b.n	8002cc8 <_malloc_r+0xa0>
 8002cee:	4623      	mov	r3, r4
 8002cf0:	6864      	ldr	r4, [r4, #4]
 8002cf2:	e7b2      	b.n	8002c5a <_malloc_r+0x32>
 8002cf4:	4634      	mov	r4, r6
 8002cf6:	6876      	ldr	r6, [r6, #4]
 8002cf8:	e7b9      	b.n	8002c6e <_malloc_r+0x46>
 8002cfa:	230c      	movs	r3, #12
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	f000 f81c 	bl	8002d3c <__malloc_unlock>
 8002d04:	e7a1      	b.n	8002c4a <_malloc_r+0x22>
 8002d06:	6025      	str	r5, [r4, #0]
 8002d08:	e7de      	b.n	8002cc8 <_malloc_r+0xa0>
 8002d0a:	bf00      	nop
 8002d0c:	200001c0 	.word	0x200001c0

08002d10 <_sbrk_r>:
 8002d10:	b538      	push	{r3, r4, r5, lr}
 8002d12:	2300      	movs	r3, #0
 8002d14:	4d05      	ldr	r5, [pc, #20]	; (8002d2c <_sbrk_r+0x1c>)
 8002d16:	4604      	mov	r4, r0
 8002d18:	4608      	mov	r0, r1
 8002d1a:	602b      	str	r3, [r5, #0]
 8002d1c:	f7fd feb0 	bl	8000a80 <_sbrk>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	d102      	bne.n	8002d2a <_sbrk_r+0x1a>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b103      	cbz	r3, 8002d2a <_sbrk_r+0x1a>
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	200001c8 	.word	0x200001c8

08002d30 <__malloc_lock>:
 8002d30:	4801      	ldr	r0, [pc, #4]	; (8002d38 <__malloc_lock+0x8>)
 8002d32:	f000 b809 	b.w	8002d48 <__retarget_lock_acquire_recursive>
 8002d36:	bf00      	nop
 8002d38:	200001cc 	.word	0x200001cc

08002d3c <__malloc_unlock>:
 8002d3c:	4801      	ldr	r0, [pc, #4]	; (8002d44 <__malloc_unlock+0x8>)
 8002d3e:	f000 b804 	b.w	8002d4a <__retarget_lock_release_recursive>
 8002d42:	bf00      	nop
 8002d44:	200001cc 	.word	0x200001cc

08002d48 <__retarget_lock_acquire_recursive>:
 8002d48:	4770      	bx	lr

08002d4a <__retarget_lock_release_recursive>:
 8002d4a:	4770      	bx	lr

08002d4c <_init>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr

08002d58 <_fini>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr
